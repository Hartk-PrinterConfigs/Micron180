[neopixel caselight]
pin:PA13
chain_count: 40
color_order: GRB
initial_RED:0.6
initial_GREEN: 0.6
initial_BLUE: 0.6

[neopixel toolhead]
pin: can0:RGBLED
chain_count: 6
color_order: GRB
initial_RED:0.6
initial_GREEN: 0.6
initial_BLUE: 0.6


#####################################################################
# Neopixel
#####################################################################


[led_effect HEATING]
autostart:              false
frame_rate:             24
leds:
    neopixel:caselight
layers:
    breathing 5 1.5 top (.8,.0,0)

[led_effect RAINBOW]
autostart:              false
frame_rate:             24
leds:
    neopixel:caselight
layers:
    gradient 1 1 top (1.0, 0.0, 0.0),(0.0, 1.0, 0.0),(0.0, 0.0, 1.0)

[led_effect STANDBY]
autostart:              false
frame_rate:             24
leds:
    neopixel:caselight
layers:
    comet  0.3  0 add (0, 0, 1)

[led_effect READY]
autostart:              false
frame_rate:             24
leds:
    neopixel:caselight
layers:
    static 0 0 top (1, 1, 1)

[gcode_macro STATUS_READY]
gcode:
  STOP_LED_EFFECTS
  SET_LED_EFFECT EFFECT=READY

[gcode_macro STATUS_HEATING]
gcode:
  STOP_LED_EFFECTS
  SET_LED_EFFECT EFFECT=HEATING

[gcode_macro STATUS_RAINBOW]
gcode:
  STOP_LED_EFFECTS
  SET_LED_EFFECT EFFECT=RAINBOW

[gcode_macro STATUS_STANDBY]
gcode:
  STOP_LED_EFFECTS
  SET_LED_EFFECT EFFECT=STANDBY
  
[gcode_macro STATUS_OFF]
gcode:
  STOP_LED_EFFECTS

[delayed_gcode SET_LEDS_ON_BOOT]
initial_duration: 1
gcode:
        STATUS_READY

# Most configuration for the macros can be done by modifying the variables in the _sb_vars macro
# at the start of this file.

##########
# MACROS #
##########

# The following status macros are available (these go inside of your macros):
#
#    STATUS_READY
#    STATUS_OFF
#    STATUS_BUSY
#    STATUS_HEATING
#    STATUS_LEVELING
#    STATUS_HOMING
#    STATUS_CLEANING
#    STATUS_MESHING
#    STATUS_CALIBRATING_Z
#
# With additional macros for basic control:
#
#    SET_NOZZLE_LEDS_ON
#    SET_LOGO_LEDS_OFF
#    SET_NOZZLE_LEDS_OFF
#
# Contributed by Voron discord users wile.e, Tetsunosuke, and etherwalker


[gcode_macro _led_vars]
# User settings for the StealthBurner status leds. You can change the status colors and led
# configurations for the logo and nozzle here.
variable_colors: { # Colors for logo states
            'busy': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0},
            'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},
            'heating': {'r': 0.5, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'homing': {'r': 0.0, 'g': 0.6, 'b': 0.0, 'w': 0.0},
            'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},
            'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},
            'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'printing': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w': 0.0},
            'ready': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w': 0.0},
           }
gcode:
    # This section is required.  Do Not Delete.


[gcode_macro _set_leds]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = params.LED|string %}
    {% set idx = (params.IDX|string).split(',') %}
    {% set transmit_last = params.TRANSMIT|default(1) %}
    set_led led={led} red={red} green={green} blue={blue} white={white} transmit=1
 

[gcode_macro _set_leds_by_name]
gcode:
    {% set leds_name = params.LEDS %}
    {% set color_name = params.COLOR %}
    {% set color = printer["gcode_macro _led_vars"].colors[color_name] %}
    {% set transmit = params.TRANSMIT|default(1) %}
    DISPLAYTEXT TEXT={color_name}
    _set_leds led={leds_name} red={color.r} green={color.g} blue={color.b} transmit={transmit}
    _NOZZLE_LEDS_ON
    

[gcode_macro _set_leds_off]
gcode:
     {% set transmit=params.TRANSMIT|default(1) %}
    _set_leds_by_name leds="enclosure" color="off" transmit={transmit}
   
[gcode_macro _set_leds_on]
gcode:
    {% set transmit=params.TRANSMIT|default(1) %}
    _set_leds_by_name leds="enclosure" color="ready" transmit={transmit}
    _NOZZLE_LEDS_ON

[gcode_macro STATUS_OFF]
gcode:
     _SET_LEDS_OFF
    _NOZZLE_LEDS_OFF

[gcode_macro STATUS_READY]
gcode:
    _set_leds_by_name leds="enclosure" color="ready" transmit=0

[gcode_macro STATUS_BUSY]
gcode:
    _set_leds_by_name leds="enclosure" color="busy" transmit=0

[gcode_macro STATUS_HEATING]
gcode:
    _set_leds_by_name leds="enclosure" color="heating" transmit=0

[gcode_macro STATUS_LEVELING]
gcode:
    _set_leds_by_name leds="enclosure" color="leveling" transmit=0

[gcode_macro STATUS_HOMING]
gcode:
    _set_leds_by_name leds="enclosure" color="homing" transmit=0

[gcode_macro STATUS_CLEANING]
gcode:
    _set_leds_by_name leds="enclosure" color="cleaning" transmit=0

[gcode_macro STATUS_MESHING]
gcode:
    _set_leds_by_name leds="enclosure" color="meshing" transmit=0

[gcode_macro STATUS_PRINTING]
gcode:
    _set_leds_by_name leds="enclosure" color="printing" transmit=0

##  Set RGB values on boot up for each Neopixel. 
##  Index 1 = logo, Index 2 and 3 = nozzle
[delayed_gcode set_leds_on_boot]
initial_duration: 1
gcode:
        STATUS_READY

[gcode_macro _NOZZLE_LEDS_OFF]
gcode: 
  SET_LED LED="toolhead" RED=0 GREEN=0 BLUE=0 SYNC=0 TRANSMIT=1

[gcode_macro  _NOZZLE_LEDS_ON]
gcode: 
  SET_LED LED="toolhead" RED=1 GREEN=1 BLUE=1 SYNC=0 TRANSMIT=1
# [gcode_macro flicker]
# gcode:
#     {% set LEDTimes = [10, 20, 20, 240, 20, 40, 20, 100, 20, 20, 20, 260, 80, 20, 240, 60, 160, 20, 240, 20, 1000, 20, 20, 40, 100, 20, 274, 340, 860, 20, 1400, 20, 60, 20] %}
#     {% set RGB_Red = 0.2 %}
#     {% set RGB_Green = 0.2 %}
#     {% set RGB_Blue = 0.2 %}
#     {% set RGB_Strip = "sb_leds" %}

#     {% for toggletime in LEDTimes %}
#       {% set ledTime = toggletime|string %}
#       {% set loopCount = loop.index %}

#       {% if loopCount is divisibleby 2 %} # If the loop index is divisible by 2 (firtst index is NOT so the LEd should turn ON)
#         SET_LED LED={RGB_Strip} RED={RGB_Red} GREEN={RGB_Green} BLUE={RGB_Blue} 
#         G4 P{ledTime|int}
#       {% else %}
#         SET_LED LED={RGB_Strip}
#         G4 P{ledTime|int}
#       {% endif %}

#     {% endfor %}

#     {% for i in range(1,9) %}  # loops 1,2,3,4,5
#       {action_respond_info(i|string)}
#       SET_LED LED={RGB_Strip} RED={RGB_Red+(i/10)} GREEN={RGB_Green+(i/10)}  BLUE={RGB_Blue+(i/10)} INDEX=1
#       G4 P200
#     {% endfor %}
    